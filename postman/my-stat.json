{
	"info": {
		"_postman_id": "903c042c-4c5e-4d79-9f55-c6eb6a0c4a6d",
		"name": "stat-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41812620"
	},
	"item": [
		{
			"name": "hit",
			"item": [
				{
					"name": "Сохранение хита",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => { ",
									"    try {",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "app",
									"value": "ewm-main-service",
									"type": "text"
								},
								{
									"key": "uri",
									"value": "/events/1",
									"type": "text"
								},
								{
									"key": "ip",
									"value": "192.168.0.2",
									"type": "text"
								},
								{
									"key": "timestamp",
									"value": "2022-09-06 11:00:23",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/hit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hit"
							]
						},
						"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
					},
					"response": [
						{
							"name": "Информация сохранена",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"app\": \"<string>\",\n  \"uri\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"timestamp\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hit"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "stats",
			"item": [
				{
					"name": "Получение статистики по посещениям. Обратите внимание: значение даты и времени нужно закодировать (например используя java.net.URLEncoder.encode) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"pm.test(\"Test fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('app');",
									"    pm.expect(jsonData).to.have.property('uri');",
									"    pm.expect(jsonData).to.have.property('ip');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const main = async () => { ",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let hit;",
									"    try {",
									"        hit = await api.ad1dHit(rnd.getHit());",
									"        // pm.collectionVariables.s1et(\"hit\", hit.timestemp);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "<string>",
									"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
								},
								{
									"key": "end",
									"value": "<string>",
									"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
								},
								{
									"key": "uris",
									"value": "<string>",
									"description": "Список uri для которых нужно выгрузить статистику"
								},
								{
									"key": "unique",
									"value": "false",
									"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
								}
							]
						}
					},
					"response": [
						{
							"name": "Статистика собрана",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "<string>",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "<string>",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "<string>",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "unique",
											"value": "false",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addHit(hit, verbose = null) {",
					"        return this.post(\"/hit\", hit, \"Ошибка при сохранении статистики: \", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose = null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose = null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose = null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async put(path, body = null, errorText = \"Ошибка при выполнении put-запроса: \", verbose = null) {",
					"        return this.sendRequest(\"PUT\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose = null) {",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose = null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if (verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if (error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                            \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" +",
					"                            \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if (verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0) {",
					"                        resolve(null);",
					"                    } else {",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"",
					"            } catch (err) {",
					"                if (verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() { }",
					"",
					"    getHit() {",
					"        return {",
					"            app: this.getAppName(),",
					"            uri: this.getURI(),",
					"            ip: this.getIPv4(),",
					"            timestamp: this.getTimestamp()",
					"        };",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"",
					"    getIPv4() {",
					"        return [",
					"            Math.floor(Math.random() * 256),",
					"            Math.floor(Math.random() * 256),",
					"            Math.floor(Math.random() * 256),",
					"            Math.floor(Math.random() * 256)",
					"        ].join('.');",
					"    }",
					"",
					"    getTimestamp(startYear = 1960, endYear = 2020, month = null) {",
					"        let date = new Date(new Date(1960, 0, 1).getTime() +",
					"            Math.random() *",
					"            (new Date(2020, 0, 1).getTime() - new Date(1960, 0, 1).getTime()));",
					"        return date.toISOString().replace('T', ' ').slice(0, 10);",
					"    }",
					"",
					"    getURI() {",
					"        const path = ['items', 'posts', 'users', 'orders', 'products'];",
					"        const id = Math.floor(Math.random() * 10000);",
					"        return `/${path[Math.floor(Math.random() * path.length)]}/${id}`;",
					"    }",
					"",
					"    getAppName() {",
					"        const path = ['AppName_1', 'AppName_2', 'AppName_3', 'AppName_4'];",
					"        return `/${path[Math.floor(Math.random() * path.length)]}`;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}